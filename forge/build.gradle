import java.util.stream.Collectors

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    shadowCommon
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        def fcMixinConfigs = [
                "predicates",
                "fastmap",
                "mrl",
                "dedupmultipart",
                "blockstatecache",
                "dedupbakedquad",
        ].stream()
                .<String> map({ s -> "ferritecore." + s + ".mixin.json" })
                .collect(Collectors.toList())
        mixinConfigs.addAll(fcMixinConfigs)
    }
}

dependencies {
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentForge(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archiveFile)
    classifier "forge"
}
